require 'spec_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

describe YoutubeIdsController do

  # This should return the minimal set of attributes required to create a valid
  # YoutubeId. As you add validations to YoutubeId, be sure to
  # update the return value of this method accordingly.
  def valid_attributes
    {:y_id => "http://www.youtube.com/watch?v=g0OzSpzYe6I"}
  end

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # YoutubeIdsController. Be sure to keep this updated too.
  def valid_session
    {}
  end
  
  before(:each) do
    #@user = FactoryGirl.create(:user, :id => 1)
    #sign_in @user
    
    @youtube_ids = FactoryGirl.create_list(:youtube_id, 4)
  end
  
  describe "GET index" do
    it "assigns all youtube_ids as @youtube_ids" do
      get :index, {}, valid_session
      
      assigns(:youtube_ids).length.should eq(4)
    end
  end

  describe "GET new" do
    it "render 'new' view" do
      get :new
      
      response.should render_template('new')
      response.should be_success
    end
  end

  describe "POST 'create'" do
    it "redirect 'index' view" do
      post :create, :youtube_id => valid_attributes
      
      youtube_id = YoutubeId.where(:y_id => "g0OzSpzYe6I")
      youtube_id.should_not nil
      
      response.should redirect_to(new_youtube_id_path)
    end
    
    it "render 'new' view with validation error" do
      post :create, :youtube_id => {:y_id => ""}
      
      response.should render_template('new')
      flash[:notice].should include("input Youtube URL")
    end
    
    it "render 'new' view with validation error" do
      post :create, :youtube_id => {:y_id => "http://www.youtu.com/watch?v=2123"}
      
      response.should render_template('new')
      flash[:notice].should include("not youtube url")
    end
    
    it "render 'new' view with validation error" do
      post :create, :youtube_id => {:y_id => "http://www.youtube.com/watch?v=g0OzSpzYe6I adgf"}
      
      response.should render_template('new')
      flash[:notice].should include("invalid url")
    end
    
    it "render 'new' view with validation error" do
      post :create, :youtube_id => {:y_id => "http://www.youtube.com/watch"}
      
      response.should render_template('new')
      flash[:notice].should include("can't find params")
    end
    
    it "render 'new' view with validation error" do
      post :create, :youtube_id => {:y_id => "http://www.youtube.com/watch?c=g0OzSpzYe6I"}
      
      response.should render_template('new')
      flash[:notice].should include("can't find id")
    end
    
    it "render 'new' view with 'not found' message" do
      post :create, :youtube_id => {:y_id => "http://www.youtube.com/watch?v=g0OzSpzYe6I12"}
      
      response.should render_template('new')
      flash[:notice].should include("Video not found")
    end
  end
end
